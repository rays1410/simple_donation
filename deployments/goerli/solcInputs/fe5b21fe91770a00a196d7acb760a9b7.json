{
  "language": "Solidity",
  "sources": {
    "contracts/CurrencyConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n/**@title ETH/USD converter library for unit256\r\n * @author rays1410\r\n * @notice Using this library we can convert ETH to USD\r\n */\r\n\r\nlibrary CurrencyConverter {\r\n    function convert_ETH_USD(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface _priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = _priceFeed.latestRoundData();\r\n        uint256 ethPrice = (uint256(answer) * 10e10);\r\n        return (ethPrice * ethAmount) / 10e18;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/SimpleDonation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./CurrencyConverter.sol\";\r\n\r\n/* Errors */\r\nerror SimpleDonation__NotOwner();\r\n\r\n/**@title Simple donation contract\r\n * @author rays1410\r\n * @notice This contract allows to create donation contract\r\n * @dev One needs to expand it to the contract factory.\r\n *      It means that any user can deploy its own donation contract\r\n *      based on this one.\r\n */\r\ncontract SimpleDonation {\r\n    /* Libraries */\r\n    using CurrencyConverter for uint256;\r\n\r\n    // Donators array\r\n    address[] private s_donators;\r\n\r\n    // The owner is set once (also immutable consumes less gas)\r\n    address private immutable i_owner;\r\n\r\n    // Current contribution of users\r\n    mapping(address => uint256) private s_addressToAmount;\r\n\r\n    // Goerli, Chainlink: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n    // For the current USD/ETH price\r\n    AggregatorV3Interface private s_priceFeed;\r\n\r\n    /* Events */\r\n    event Donation__Alert(address indexed _donator, uint256 _amount); // Emit this when the new donation received\r\n    event Donation__FundsWithdrawed(uint256 _amount); // Emit when all balance is withdrawed by owner\r\n\r\n    // OnlyOwner modifier, can be replaced for the OpenZeppelin one\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) {\r\n            revert SimpleDonation__NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address _priceFeed) {\r\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    // Users use this function for donation\r\n    function donate() public payable {\r\n        s_donators.push(msg.sender);\r\n        s_addressToAmount[msg.sender] += msg.value;\r\n        emit Donation__Alert(msg.sender, msg.value);\r\n    }\r\n\r\n    // The owner withdraws balance when he wants\r\n    function withdraw() public payable onlyOwner {\r\n        (bool sent, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        if (sent == true) {\r\n            emit Donation__FundsWithdrawed(address(this).balance);\r\n        }\r\n    }\r\n\r\n    // Check how much particular user has donated (in USD)\r\n    function getUserContribution() public view returns (uint256) {\r\n        uint256 userEthBalance = s_addressToAmount[msg.sender];\r\n        return userEthBalance.convert_ETH_USD(s_priceFeed);\r\n    }\r\n\r\n    // Check current contract balance (in USD)\r\n    function getContractBalance() public view returns (uint256) {\r\n        uint256 ethBalance = address(this).balance;\r\n        return ethBalance.convert_ETH_USD(s_priceFeed);\r\n    }\r\n\r\n    // Just call donate() if msg.data is empty\r\n    receive() external payable {\r\n        donate();\r\n    }\r\n\r\n    // Just call donate() if msg.data is not empty\r\n    fallback() external payable {\r\n        donate();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}